// Code generated by protoc-gen-go. DO NOT EDIT.
// source: models/primedecomp.proto

package primedecomp

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Decomposition struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Decomposition) Reset()         { *m = Decomposition{} }
func (m *Decomposition) String() string { return proto.CompactTextString(m) }
func (*Decomposition) ProtoMessage()    {}
func (*Decomposition) Descriptor() ([]byte, []int) {
	return fileDescriptor_e80f2a94648bf847, []int{0}
}

func (m *Decomposition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Decomposition.Unmarshal(m, b)
}
func (m *Decomposition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Decomposition.Marshal(b, m, deterministic)
}
func (m *Decomposition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Decomposition.Merge(m, src)
}
func (m *Decomposition) XXX_Size() int {
	return xxx_messageInfo_Decomposition.Size(m)
}
func (m *Decomposition) XXX_DiscardUnknown() {
	xxx_messageInfo_Decomposition.DiscardUnknown(m)
}

var xxx_messageInfo_Decomposition proto.InternalMessageInfo

func (m *Decomposition) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type DecompositionRequest struct {
	Decomposition        *Decomposition `protobuf:"bytes,1,opt,name=decomposition,proto3" json:"decomposition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DecompositionRequest) Reset()         { *m = DecompositionRequest{} }
func (m *DecompositionRequest) String() string { return proto.CompactTextString(m) }
func (*DecompositionRequest) ProtoMessage()    {}
func (*DecompositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e80f2a94648bf847, []int{1}
}

func (m *DecompositionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecompositionRequest.Unmarshal(m, b)
}
func (m *DecompositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecompositionRequest.Marshal(b, m, deterministic)
}
func (m *DecompositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecompositionRequest.Merge(m, src)
}
func (m *DecompositionRequest) XXX_Size() int {
	return xxx_messageInfo_DecompositionRequest.Size(m)
}
func (m *DecompositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DecompositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DecompositionRequest proto.InternalMessageInfo

func (m *DecompositionRequest) GetDecomposition() *Decomposition {
	if m != nil {
		return m.Decomposition
	}
	return nil
}

type DecompositionResponse struct {
	Multiplier           int32    `protobuf:"varint,1,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DecompositionResponse) Reset()         { *m = DecompositionResponse{} }
func (m *DecompositionResponse) String() string { return proto.CompactTextString(m) }
func (*DecompositionResponse) ProtoMessage()    {}
func (*DecompositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e80f2a94648bf847, []int{2}
}

func (m *DecompositionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecompositionResponse.Unmarshal(m, b)
}
func (m *DecompositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecompositionResponse.Marshal(b, m, deterministic)
}
func (m *DecompositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecompositionResponse.Merge(m, src)
}
func (m *DecompositionResponse) XXX_Size() int {
	return xxx_messageInfo_DecompositionResponse.Size(m)
}
func (m *DecompositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DecompositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DecompositionResponse proto.InternalMessageInfo

func (m *DecompositionResponse) GetMultiplier() int32 {
	if m != nil {
		return m.Multiplier
	}
	return 0
}

func init() {
	proto.RegisterType((*Decomposition)(nil), "primedecomp.Decomposition")
	proto.RegisterType((*DecompositionRequest)(nil), "primedecomp.DecompositionRequest")
	proto.RegisterType((*DecompositionResponse)(nil), "primedecomp.DecompositionResponse")
}

func init() { proto.RegisterFile("models/primedecomp.proto", fileDescriptor_e80f2a94648bf847) }

var fileDescriptor_e80f2a94648bf847 = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xc8, 0xcd, 0x4f, 0x49,
	0xcd, 0x29, 0xd6, 0x2f, 0x28, 0xca, 0xcc, 0x4d, 0x4d, 0x49, 0x4d, 0xce, 0xcf, 0x2d, 0xd0, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x46, 0x12, 0x52, 0x52, 0xe7, 0xe2, 0x75, 0x01, 0xb3, 0xf2,
	0x8b, 0x33, 0x4b, 0x32, 0xf3, 0xf3, 0x84, 0xc4, 0xb8, 0xd8, 0xf2, 0x4a, 0x73, 0x93, 0x52, 0x8b,
	0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0xa0, 0x3c, 0xa5, 0x08, 0x2e, 0x11, 0x14, 0x85, 0x41,
	0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x0e, 0x5c, 0xbc, 0x29, 0xc8, 0xe2, 0x60, 0x6d, 0xdc,
	0x46, 0x52, 0x7a, 0xc8, 0x16, 0xa3, 0xea, 0x44, 0xd5, 0xa0, 0x64, 0xce, 0x25, 0x8a, 0x66, 0x72,
	0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x1c, 0x17, 0x57, 0x6e, 0x69, 0x4e, 0x49, 0x66, 0x41,
	0x4e, 0x26, 0xdc, 0x39, 0x48, 0x22, 0x46, 0xc5, 0x5c, 0x92, 0x01, 0x20, 0x4b, 0x50, 0x74, 0x07,
	0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0x85, 0x71, 0x71, 0xc2, 0xc4, 0x53, 0x85, 0x14, 0xf1,
	0xb8, 0x06, 0xe2, 0x0f, 0x29, 0x25, 0x7c, 0x4a, 0x20, 0x0e, 0x52, 0x62, 0x30, 0x60, 0x74, 0xe2,
	0x8d, 0x42, 0x0e, 0xbf, 0x24, 0x36, 0x70, 0x98, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x86,
	0xe2, 0xd7, 0x52, 0x6f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PrimeDecompositionServiceClient is the client API for PrimeDecompositionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrimeDecompositionServiceClient interface {
	Decompose(ctx context.Context, in *DecompositionRequest, opts ...grpc.CallOption) (PrimeDecompositionService_DecomposeClient, error)
}

type primeDecompositionServiceClient struct {
	cc *grpc.ClientConn
}

func NewPrimeDecompositionServiceClient(cc *grpc.ClientConn) PrimeDecompositionServiceClient {
	return &primeDecompositionServiceClient{cc}
}

func (c *primeDecompositionServiceClient) Decompose(ctx context.Context, in *DecompositionRequest, opts ...grpc.CallOption) (PrimeDecompositionService_DecomposeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PrimeDecompositionService_serviceDesc.Streams[0], "/primedecomp.PrimeDecompositionService/Decompose", opts...)
	if err != nil {
		return nil, err
	}
	x := &primeDecompositionServiceDecomposeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrimeDecompositionService_DecomposeClient interface {
	Recv() (*DecompositionResponse, error)
	grpc.ClientStream
}

type primeDecompositionServiceDecomposeClient struct {
	grpc.ClientStream
}

func (x *primeDecompositionServiceDecomposeClient) Recv() (*DecompositionResponse, error) {
	m := new(DecompositionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrimeDecompositionServiceServer is the server API for PrimeDecompositionService service.
type PrimeDecompositionServiceServer interface {
	Decompose(*DecompositionRequest, PrimeDecompositionService_DecomposeServer) error
}

// UnimplementedPrimeDecompositionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPrimeDecompositionServiceServer struct {
}

func (*UnimplementedPrimeDecompositionServiceServer) Decompose(req *DecompositionRequest, srv PrimeDecompositionService_DecomposeServer) error {
	return status.Errorf(codes.Unimplemented, "method Decompose not implemented")
}

func RegisterPrimeDecompositionServiceServer(s *grpc.Server, srv PrimeDecompositionServiceServer) {
	s.RegisterService(&_PrimeDecompositionService_serviceDesc, srv)
}

func _PrimeDecompositionService_Decompose_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DecompositionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrimeDecompositionServiceServer).Decompose(m, &primeDecompositionServiceDecomposeServer{stream})
}

type PrimeDecompositionService_DecomposeServer interface {
	Send(*DecompositionResponse) error
	grpc.ServerStream
}

type primeDecompositionServiceDecomposeServer struct {
	grpc.ServerStream
}

func (x *primeDecompositionServiceDecomposeServer) Send(m *DecompositionResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PrimeDecompositionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "primedecomp.PrimeDecompositionService",
	HandlerType: (*PrimeDecompositionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Decompose",
			Handler:       _PrimeDecompositionService_Decompose_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "models/primedecomp.proto",
}
